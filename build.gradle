apply plugin: 'de.gliderpilot.semantic-release'

apply from: 'gradle/compile.gradle'
apply from: 'gradle/publishing.gradle'
apply from: 'gradle/code-quality.gradle'
apply from: 'gradle/code-coverage.gradle'
apply from: 'gradle/publish-plugin.gradle'

buildscript {
	repositories {
		jcenter()
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath "de.gliderpilot.gradle.semantic-release:gradle-semantic-release-plugin:1.1.2"
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
        classpath "ru.vyarus:gradle-quality-plugin:1.0.3"
        classpath 'net.saliman:gradle-cobertura-plugin:2.2.8'
        classpath "com.gradle.publish:plugin-publish-plugin:0.9.2"
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.4.0'
    }
}

group 'com.github.rzabini'

release {
    versionStrategy org.ajoberstar.gradle.git.release.semver.RebuildVersionStrategy.INSTANCE
}

repositories {
	mavenCentral()
}

dependencies {
    compile gradleApi()
	compile 'de.undercouch:gradle-download-task:2.0.0'

	testCompile 'org.spockframework:spock-core:1.0-groovy-2.3',
            {exclude module: "groovy-all"}

}

dependencies {
    testCompile 'com.netflix.nebula:nebula-test:3.1.0', {
        exclude module: 'groovy-all'
    }
}

task integTest {
    dependsOn test
}

tasks.release {
    dependsOn build
    finalizedBy publishPlugins
    if(tasks.findByPath('bintrayUpload')) { finalizedBy 'bintrayUpload' }
    if(tasks.findByPath('artifactoryPublish')) { finalizedBy 'artifactoryPublish' }
}

test {
    if (gradle.startParameter.taskNames.find { ['integTest', 'release'].contains(it) })
        systemProperty 'integTest', 'true'
    maxHeapSize = '512m'
    jvmArgs '-XX:MaxPermSize=256m'
}

publishing {
	publications {
		plugin(MavenPublication) {
			from components.java
		}
	}
}
